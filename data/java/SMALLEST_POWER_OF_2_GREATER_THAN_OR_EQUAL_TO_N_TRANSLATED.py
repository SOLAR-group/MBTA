import sys

def f_gold ( n ) :
    """ STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKEN number SPACETOKEN of SPACETOKEN gold SPACETOKEN power SPACETOKEN of SPACETOKEN two SPACETOKEN of SPACETOKEN the SPACETOKEN given SPACETOKEN n.STRNEWLINE STRNEWLINE SPACETOKEN >> > SPACETOKEN from SPACETOKEN sympy.polys.distributedmodules SPACETOKEN import SPACETOKEN F , SPACETOKEN binomial , SPACETOKEN Sum STRNEWLINE SPACETOKEN >> > SPACETOKEN from SPACETOKEN sympy.polys.distributedmodules SPACETOKEN import SPACETOKEN F _ gold STRNEWLINE SPACETOKEN >> > SPACETOKEN from SPACETOKEN sympy.polys.monomials SPACETOKEN import SPACETOKEN binomial STRNEWLINE SPACETOKEN >> > SPACETOKEN from SPACETOKEN sympy.polys.densearith SPACETOKEN import SPACETOKEN F _ gold STRNEWLINE SPACETOKEN >> > SPACETOKEN F _ gold ( 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial ( 2 , SPACETOKEN 2 ) STRNEWLINE SPACETOKEN 2 STRNEWLINE SPACETOKEN >> > SPACETOKEN binomial (
if __name__ == '__main__':
    param = [
    (13,),
    (27,),
    (1,),
    (24,),
    (98,),
    (94,),
    (36,),
    (41,),
    (74,),
    (39,)
        ]
    n_success = 0
    print("class,mutant,test_index,result")
    for i, parameters_set in enumerate(param):
        try:
            print("SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N," + sys.argv[1] + "," + str(i) + "," + str(f_gold(*parameters_set)))
        except:
            print("SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N," + sys.argv[1] + "," + str(i) + ",EXCEPTION")
